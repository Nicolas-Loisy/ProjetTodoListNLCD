{"ast":null,"code":"export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  let {\n    size,\n    grid\n  } = _ref;\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid(_ref2) {\n  let {\n    lineHeight,\n    pixels,\n    htmlFontSize\n  } = _ref2;\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\r\n * generate a responsive version of a given CSS property\r\n * @example\r\n * responsiveProperty({\r\n *   cssProperty: 'fontSize',\r\n *   min: 15,\r\n *   max: 20,\r\n *   unit: 'px',\r\n *   breakpoints: [300, 600],\r\n * })\r\n *\r\n * // this returns\r\n *\r\n * {\r\n *   fontSize: '15px',\r\n *   '@media (min-width:300px)': {\r\n *     fontSize: '17.5px',\r\n *   },\r\n *   '@media (min-width:600px)': {\r\n *     fontSize: '20px',\r\n *   },\r\n * }\r\n * @param {Object} params\r\n * @param {string} params.cssProperty - The CSS property to be made responsive\r\n * @param {number} params.min - The smallest value of the CSS property\r\n * @param {number} params.max - The largest value of the CSS property\r\n * @param {string} [params.unit] - The unit to be used for the CSS property\r\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\r\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\r\n * @returns {Object} responsive styles for {params.cssProperty}\r\n */\nexport function responsiveProperty(_ref3) {\n  let {\n    cssProperty,\n    min,\n    max,\n    unit = 'rem',\n    breakpoints = [600, 900, 1200],\n    transform = null\n  } = _ref3;\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","map":{"version":3,"names":["isUnitless","value","String","parseFloat","length","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","size","grid","sizeBelow","sizeAbove","fontGrid","lineHeight","pixels","htmlFontSize","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"sources":["C:/Users/clemd/Desktop/Projet ReactJS/ProjetTodoListNLCD/todo_list_projNLCD/node_modules/@mui/material/styles/cssUtils.js"],"sourcesContent":["export function isUnitless(value) {\r\n  return String(parseFloat(value)).length === String(value).length;\r\n}\r\n\r\n// Ported from Compass\r\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\r\n// Emulate the sass function \"unit\"\r\nexport function getUnit(input) {\r\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\r\n}\r\n\r\n// Emulate the sass function \"unitless\"\r\nexport function toUnitless(length) {\r\n  return parseFloat(length);\r\n}\r\n\r\n// Convert any CSS <length> or <percentage> value to any another.\r\n// From https://github.com/KyleAMathews/convert-css-length\r\nexport function convertLength(baseFontSize) {\r\n  return (length, toUnit) => {\r\n    const fromUnit = getUnit(length);\r\n\r\n    // Optimize for cases where `from` and `to` units are accidentally the same.\r\n    if (fromUnit === toUnit) {\r\n      return length;\r\n    }\r\n\r\n    // Convert input length to pixels.\r\n    let pxLength = toUnitless(length);\r\n    if (fromUnit !== 'px') {\r\n      if (fromUnit === 'em') {\r\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\r\n      } else if (fromUnit === 'rem') {\r\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\r\n      }\r\n    }\r\n\r\n    // Convert length in pixels to the output unit\r\n    let outputLength = pxLength;\r\n    if (toUnit !== 'px') {\r\n      if (toUnit === 'em') {\r\n        outputLength = pxLength / toUnitless(baseFontSize);\r\n      } else if (toUnit === 'rem') {\r\n        outputLength = pxLength / toUnitless(baseFontSize);\r\n      } else {\r\n        return length;\r\n      }\r\n    }\r\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\r\n  };\r\n}\r\nexport function alignProperty({\r\n  size,\r\n  grid\r\n}) {\r\n  const sizeBelow = size - size % grid;\r\n  const sizeAbove = sizeBelow + grid;\r\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\r\n}\r\n\r\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\r\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\r\n// without changing the relative line height\r\nexport function fontGrid({\r\n  lineHeight,\r\n  pixels,\r\n  htmlFontSize\r\n}) {\r\n  return pixels / (lineHeight * htmlFontSize);\r\n}\r\n\r\n/**\r\n * generate a responsive version of a given CSS property\r\n * @example\r\n * responsiveProperty({\r\n *   cssProperty: 'fontSize',\r\n *   min: 15,\r\n *   max: 20,\r\n *   unit: 'px',\r\n *   breakpoints: [300, 600],\r\n * })\r\n *\r\n * // this returns\r\n *\r\n * {\r\n *   fontSize: '15px',\r\n *   '@media (min-width:300px)': {\r\n *     fontSize: '17.5px',\r\n *   },\r\n *   '@media (min-width:600px)': {\r\n *     fontSize: '20px',\r\n *   },\r\n * }\r\n * @param {Object} params\r\n * @param {string} params.cssProperty - The CSS property to be made responsive\r\n * @param {number} params.min - The smallest value of the CSS property\r\n * @param {number} params.max - The largest value of the CSS property\r\n * @param {string} [params.unit] - The unit to be used for the CSS property\r\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\r\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\r\n * @returns {Object} responsive styles for {params.cssProperty}\r\n */\r\nexport function responsiveProperty({\r\n  cssProperty,\r\n  min,\r\n  max,\r\n  unit = 'rem',\r\n  breakpoints = [600, 900, 1200],\r\n  transform = null\r\n}) {\r\n  const output = {\r\n    [cssProperty]: `${min}${unit}`\r\n  };\r\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\r\n  breakpoints.forEach(breakpoint => {\r\n    let value = min + factor * breakpoint;\r\n    if (transform !== null) {\r\n      value = transform(value);\r\n    }\r\n    output[`@media (min-width:${breakpoint}px)`] = {\r\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\r\n    };\r\n  });\r\n  return output;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}