{"ast":null,"code":"/**\r\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\r\n * and they does not need to remember the prefix (defined once).\r\n */\nexport default function createGetCssVar() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  function appendVar() {\n    for (var _len = arguments.length, vars = new Array(_len), _key = 0; _key < _len; _key++) {\n      vars[_key] = arguments[_key];\n    }\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  const getCssVar = function (field) {\n    for (var _len2 = arguments.length, fallbacks = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      fallbacks[_key2 - 1] = arguments[_key2];\n    }\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}","map":{"version":3,"names":["createGetCssVar","prefix","appendVar","vars","length","value","match","slice","getCssVar","field","fallbacks"],"sources":["C:/Users/clemd/Desktop/Projet ReactJS/ProjetTodoListNLCD/todo_list_projNLCD/node_modules/@mui/system/esm/cssVars/createGetCssVar.js"],"sourcesContent":["/**\r\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\r\n * and they does not need to remember the prefix (defined once).\r\n */\r\nexport default function createGetCssVar(prefix = '') {\r\n  function appendVar(...vars) {\r\n    if (!vars.length) {\r\n      return '';\r\n    }\r\n    const value = vars[0];\r\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\r\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\r\n    }\r\n    return `, ${value}`;\r\n  }\r\n\r\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\r\n  const getCssVar = (field, ...fallbacks) => {\r\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\r\n  };\r\n  return getCssVar;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,eAAe,GAAc;EAAA,IAAbC,MAAM,uEAAG,EAAE;EACjD,SAASC,SAAS,GAAU;IAAA,kCAANC,IAAI;MAAJA,IAAI;IAAA;IACxB,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE;MAChB,OAAO,EAAE;IACX;IACA,MAAMC,KAAK,GAAGF,IAAI,CAAC,CAAC,CAAC;IACrB,IAAI,OAAOE,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACC,KAAK,CAAC,6EAA6E,CAAC,EAAE;MAC5H,OAAQ,WAAUL,MAAM,GAAI,GAAEA,MAAO,GAAE,GAAG,EAAG,GAAEI,KAAM,GAAEH,SAAS,CAAC,GAAGC,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC,CAAE,GAAE;IACvF;IACA,OAAQ,KAAIF,KAAM,EAAC;EACrB;;EAEA;EACA,MAAMG,SAAS,GAAG,UAACC,KAAK,EAAmB;IAAA,mCAAdC,SAAS;MAATA,SAAS;IAAA;IACpC,OAAQ,SAAQT,MAAM,GAAI,GAAEA,MAAO,GAAE,GAAG,EAAG,GAAEQ,KAAM,GAAEP,SAAS,CAAC,GAAGQ,SAAS,CAAE,GAAE;EACjF,CAAC;EACD,OAAOF,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}