{"ast":null,"code":"import axios from \"axios\";\nconst {\n  v4: uuidv4\n} = require('uuid');\nexport default class Api {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n  async get(url) {\n    return (await axios.get(`${this.baseUrl}${url}`)).data;\n  }\n  async post(url, body) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n    return await axios.post(`${this.baseUrl}${url}`, body, headers);\n  }\n  async getQuotes() {\n    return await this.get(`/quotes?_expand=author`);\n  }\n  async insertQuote(content, authorId) {\n    // return (await axios.post(`${this.baseUrl}/quotes`, { content: content, authorId: authorId })).data;\n    return await this.post(\"/quotes\", {\n      id: uuidv4(),\n      content: content,\n      actor: \"\",\n      authorId: authorId,\n      season: \"\",\n      title: \"\",\n      episode: 1\n    });\n  }\n  async getAuthors() {\n    return await this.get(`/authors?_embed=quotes`);\n  }\n  async getAuthor(id) {\n    return await this.get(`/authors/${id}?_embed=quotes`);\n  }\n}\nexport const api = new Api(\"http://localhost:3000\");","map":{"version":3,"names":["axios","v4","uuidv4","require","Api","constructor","baseUrl","get","url","data","post","body","headers","getQuotes","insertQuote","content","authorId","id","actor","season","title","episode","getAuthors","getAuthor","api"],"sources":["C:/Users/clemd/Desktop/Projet ReactJS/ProjetTodoListNLCD/todo_list_projNLCD/src/lib/Api.js"],"sourcesContent":["import axios from \"axios\";\r\nconst { v4: uuidv4 } = require('uuid');\r\n\r\nexport default class Api {\r\n\r\n    constructor(baseUrl){\r\n        this.baseUrl = baseUrl;\r\n    }\r\n    async get(url){\r\n        return (await axios.get(`${this.baseUrl}${url}`)).data\r\n    }\r\n    async post(url, body){\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n        return (await axios.post(`${this.baseUrl}${url}`, body, headers));\r\n    }\r\n    async getQuotes(){\r\n        return await this.get(`/quotes?_expand=author`);\r\n    }\r\n    async insertQuote(content, authorId) {\r\n        // return (await axios.post(`${this.baseUrl}/quotes`, { content: content, authorId: authorId })).data;\r\n        return await this.post(\"/quotes\", { id:uuidv4(), content:content, actor:\"\", authorId:authorId, season:\"\", title:\"\", episode:1 })\r\n    }\r\n\r\n    async getAuthors(){\r\n        return await this.get(`/authors?_embed=quotes`);\r\n    }\r\n    async getAuthor(id){\r\n        return await this.get(`/authors/${id}?_embed=quotes`);\r\n    }\r\n\r\n}\r\n\r\nexport const api = new Api(\"http://localhost:3000\");\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAM;EAAEC,EAAE,EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAEtC,eAAe,MAAMC,GAAG,CAAC;EAErBC,WAAW,CAACC,OAAO,EAAC;IAChB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA,MAAMC,GAAG,CAACC,GAAG,EAAC;IACV,OAAO,CAAC,MAAMR,KAAK,CAACO,GAAG,CAAE,GAAE,IAAI,CAACD,OAAQ,GAAEE,GAAI,EAAC,CAAC,EAAEC,IAAI;EAC1D;EACA,MAAMC,IAAI,CAACF,GAAG,EAAEG,IAAI,EAAC;IACjB,MAAMC,OAAO,GAAG;MACZ,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;IACd,CAAC;IACD,OAAQ,MAAMZ,KAAK,CAACU,IAAI,CAAE,GAAE,IAAI,CAACJ,OAAQ,GAAEE,GAAI,EAAC,EAAEG,IAAI,EAAEC,OAAO,CAAC;EACpE;EACA,MAAMC,SAAS,GAAE;IACb,OAAO,MAAM,IAAI,CAACN,GAAG,CAAE,wBAAuB,CAAC;EACnD;EACA,MAAMO,WAAW,CAACC,OAAO,EAAEC,QAAQ,EAAE;IACjC;IACA,OAAO,MAAM,IAAI,CAACN,IAAI,CAAC,SAAS,EAAE;MAAEO,EAAE,EAACf,MAAM,EAAE;MAAEa,OAAO,EAACA,OAAO;MAAEG,KAAK,EAAC,EAAE;MAAEF,QAAQ,EAACA,QAAQ;MAAEG,MAAM,EAAC,EAAE;MAAEC,KAAK,EAAC,EAAE;MAAEC,OAAO,EAAC;IAAE,CAAC,CAAC;EACpI;EAEA,MAAMC,UAAU,GAAE;IACd,OAAO,MAAM,IAAI,CAACf,GAAG,CAAE,wBAAuB,CAAC;EACnD;EACA,MAAMgB,SAAS,CAACN,EAAE,EAAC;IACf,OAAO,MAAM,IAAI,CAACV,GAAG,CAAE,YAAWU,EAAG,gBAAe,CAAC;EACzD;AAEJ;AAEA,OAAO,MAAMO,GAAG,GAAG,IAAIpB,GAAG,CAAC,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}